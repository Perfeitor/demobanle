@using MUDTEMPLATE.Components
@using MUDTEMPLATE.DBData
@inherits LayoutComponentBase
@inject IConfiguration config

@* <MudThemeProvider @rendermode="InteractiveServer" />
<MudDialogProvider @rendermode="InteractiveServer" />
<MudSnackbarProvider @rendermode="InteractiveServer" /> *@
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="0">
        <AuthorizeView>
            <NotAuthorized>
		        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Href="Account/Login" />
            </NotAuthorized>
            
            <Authorized>
                <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

                <MudButton Href="/" DisableRipple="true" DisableElevation="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Tertiary" Size="Size.Medium"></MudIconButton>
                </MudButton>

                <MudSpacer />
                <MudIconButton Icon="@themeIcon" Size="Size.Small" Color="Color.Inherit" Edge="Edge.End" OnClick="@click" Style="padding:25px" />
                <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <ActivatorContent>
                        <MudAvatar Color="Color.Success">@context.User.Identity?.Name[0]</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="" />
                                <MudButton ButtonType="ButtonType.Submit" EndIcon="@Icons.Material.Filled.Output" Color="Color.Primary">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true">Logout</span>
                                </MudButton>
                            </form>
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6"> My App</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-1 pt-1">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    private bool _isDarkMode = false;
    private MudTheme _theme = new();
    string themeIcon = Icons.Material.Filled.WbSunny;

    bool _drawerOpen = true;
    protected override Task OnInitializedAsync()
    {
        DB.Set_Connect(config.GetConnectionString("DefaultConnection"));
        return base.OnInitializedAsync(); 
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void click()
    {
        if (_isDarkMode == true)
        {
            _isDarkMode = false;
            _theme = new();
            themeIcon = Icons.Material.Filled.WbSunny;
        }
        else
        {
            _isDarkMode = true;
            _theme = new();
            themeIcon = Icons.Material.Filled.DarkMode;
        }
    }
}


